import re
import pandas as pd
import tkinter as tk
import fuzzywuzzy
from tkinter import ttk, filedialog, messagebox
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from fuzzywuzzy import fuzz

current_missed_index = [0]


class SheetDialog(tk.Toplevel):
    def __init__(self, parent, sheet_names):
        super().__init__(parent)
        self.title("Select Sheet")
        self.selected_sheet = None

        self.sheet_listbox = tk.Listbox(self, selectmode=tk.SINGLE, exportselection=0)
        for sheet_name in sheet_names:
            self.sheet_listbox.insert(tk.END, sheet_name)
        self.sheet_listbox.pack(padx=10, pady=10)

        select_button = ttk.Button(self, text="Select Sheet", command=self.select_sheet)
        select_button.pack(pady=10)

    def select_sheet(self):
        selected_index = self.sheet_listbox.curselection()
        if selected_index:
            self.selected_sheet = self.sheet_listbox.get(selected_index)
        self.destroy()


def clear_screen(root):
    for widget in root.winfo_children():
        widget.destroy()

def extract_apartment_number(title):
    # Extract the apartment number using regular expression
    match = re.search(r'(?:Apartment|Flat|),?\s*(\d+[a-zA-Z]*).*?,', title)
    return match.group(1) if match else None


def clean_price(price):
    if isinstance(price, (int, float)):
        return price
    elif isinstance(price, str):
        # Remove all characters except numbers, ".", "+" or "-", and pound sign.
        cleaned_price = re.sub(r'[^\d\-+\.£]', '', price)

        # Check if the cleaned price is not an empty string
        if cleaned_price:
            # Handle pound sign and convert to float
            if '£' in cleaned_price:
                return float(cleaned_price.replace('£', ''))
            else:
                return float(cleaned_price)
        else:
            return float('nan')
    else:
        return price


def similarity(price1, price2):
    if price1 is None or price2 is None:
        return 0.0
    else:
        price1 = float(price1)
        price2 = float(price2)
        return fuzz.ratio(str(price1), str(price2)) / 100.0


def get_rightmove_data(url):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(options=chrome_options)

    try:
        driver.get(url)
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        # Find all elements with class 'propertyCard'
        card_elements = soup.find_all('div', class_='propertyCard')

        # Combine data into a list of dictionaries
        result = []

        for element in card_elements:
            # Extract apartment number from the title
            title_element = element.find('a', class_='title')
            if title_element:
                title = title_element.text.strip()
                apartment_number = extract_apartment_number(title)

                #print(f"Title: {title}, Aparatment Number: {apartment_number}")

                # Extract latest price
                price_elements = element.find_all('td', class_='price')
                latest_price = 'N/A'

                if price_elements:
                    # Take the latest price
                    latest_price = price_elements[0].text.strip()

                cleaned_price = clean_price(latest_price)

                result.append({
                    'apartment_number': apartment_number,
                    'price': cleaned_price,
                    'url': driver.current_url
                })

        # Sort the result list by apartment number
        result.sort(key=lambda x: x['apartment_number'])

        # Print the extracted data for debugging
        print(f"\nExtracted Data for {url}:")
        for item in result:
            print(f"Apartment {item['apartment_number']}: {item['price']}")

        return result

    except Exception as e:
        print(f"Error: {e}")
        return None

    finally:
        driver.quit()


def check_rightmove_sold(file_path, sheet_name):
    try:
        df = pd.read_excel(file_path, sheet_name=sheet_name)
    except Exception as e:
        tk.messagebox.showerror("Error", f"An error occurred while reading data from the Excel file: {e}")
        return

    # Define predefined Rightmove URLs
    rightmove_urls = [
        "https://www.rightmove.co.uk/house-prices/wc2r-1ha.html?country=england&searchLocation=WC2R+1HA",
        "https://www.rightmove.co.uk/house-prices/wc2r-1ha.html?page=2",
        "https://www.rightmove.co.uk/house-prices/wc2r-1ha.html?page=3"
    ]

    # List to store details of missed apartments
    missed_apartments = []
    current_missed_index = [0]

    def show_missed_apartment(index):
        if 0 <= index < len(missed_apartments):
            missed_apartment = missed_apartments[index]
            missed_apartment_label.config(text=f"Missed Apartment: {missed_apartment['Apartment Number']}")
        else:
            missed_apartment_label.config(text="No more missed apartments")

    def show_previous_missed_apartment():
        current_missed_index[0] -= 1
        show_missed_apartment(current_missed_index[0])

    def show_next_missed_apartment():
        current_missed_index[0] += 1
        show_missed_apartment(current_missed_index[0])

    for url in rightmove_urls:
        rightmove_data_list = get_rightmove_data(url)

        if rightmove_data_list:
            print(f"\nRightmove Data for {url}:")
            for rightmove_data in rightmove_data_list:
                rightmove_apartment_number = rightmove_data['apartment_number']
                rightmove_price = rightmove_data['price']

                #print(f"  Apartment {rightmove_apartment_number}: {rightmove_price}")

                # Filter Excel rows with matching apartment numbers
                matching_rows = df[
                    df.iloc[:, 1].astype(str).str.replace(r'[^0-9]', '').eq(str(rightmove_apartment_number))]

                # Check if there are matching rows
                if not matching_rows.empty:
                    print(f"\nExcel Data for Apartment {rightmove_apartment_number}:")

                    # Initialize variables for comparison
                    matching_price = None

                    for idx, row in matching_rows.iterrows():
                        # Extract apartment number and price from the row
                        excel_apartment_number = row.iloc[1]#B
                        excel_price = clean_price(row.iloc[4])#E

                        print(f"  Row {idx}: Apartment {excel_apartment_number} - Excel Price: {excel_price}")

                        # Check similarity between Rightmove and Excel prices
                        price_similarity = similarity(rightmove_price, excel_price)

                        # Adjust the similarity threshold as needed
                        if price_similarity >= 0.8:
                            matching_price = excel_price
                            break

                    # If matching_price is not found, add the apartment to the missed list
                    if matching_price is None:
                        matching_row = df[
                            df.iloc[:, 1].astype(str).str.replace(r'[^0-9]', '').eq(str(rightmove_apartment_number))]

                        if not matching_row.empty:
                            excel_price = clean_price(matching_row.iloc[0, 4])

                            # Check if the difference between rightmove_price and excel_price is within a threshold
                            price_difference = abs(rightmove_price - excel_price)
                            threshold = 100  # Set your threshold here
                            if price_difference <= threshold:
                                missed_apartments.append({
                                    'Apartment Number': rightmove_apartment_number,
                                    'Rightmove Price': rightmove_price,
                                    'Excel Price': excel_price,
                                    'URL': url
                                })
                            else:
                                missed_apartments.append({
                                    'Apartment Number': rightmove_apartment_number,
                                    'Rightmove Price': rightmove_price,
                                    'Excel Price': None,
                                    'URL': url
                                })
                        else:
                            missed_apartments.append({
                                'Apartment Number': rightmove_apartment_number,
                                'Rightmove Price': rightmove_price,
                                'Excel Price': None,
                                'URL': url
                            })

    # Display the missed apartments
    if missed_apartments:
        print("\nMissed Apartments:")
        for missed_apartment in missed_apartments:
            print(missed_apartment)

        # Display the missed apartment label
        missed_apartment_label = tk.Label(root, text="Missed Apartment: None")
        missed_apartment_label.pack(pady=10)

        # Display buttons for previous and next missed apartment
        previous_button = ttk.Button(root, text="Previous Missed Apartment", command=show_previous_missed_apartment)
        previous_button.pack(pady=10)

        next_button = ttk.Button(root, text="Next Missed Apartment", command=show_next_missed_apartment)
        next_button.pack(pady=10)

        # Show the first missed apartment
        show_missed_apartment(current_missed_index[0])
    else:
        print("No missed apartments found.")

    # Function to copy the link to the clipboard
    def copy_link_to_clipboard():
        if 0 <= current_missed_index[0] - 1 < len(missed_apartments):
            missed_apartment = missed_apartments[current_missed_index[0] - 1]
            root.clipboard_clear()
            root.clipboard_append(missed_apartment['URL'])
            root.update()
            tk.messagebox.showinfo("Link Copied", "Link copied to clipboard")
        else:
            tk.messagebox.showinfo("No Link", "No link to copy")

    # Display buttons for copy and show the next missed apartment
    copy_button = ttk.Button(root, text="Copy Link to Clipboard", command=copy_link_to_clipboard)
    copy_button.pack(pady=10)

class App:
    def __init__(self, root):
        self.root = root

        # sets the window size based on the user's screen size
        width = root.winfo_screenwidth()
        height = root.winfo_screenheight()

        # sets the window size
        root.geometry("%dx%d" % (width, height))

        # names the window
        root.title("Excel Automation")

        # Label for user instruction
        instruction_label = tk.Label(root, text="Enter an Excel file")
        instruction_label.pack(pady=10)

        # Button for browse file
        browse_button = ttk.Button(root, text="📂 Browse", command=self.browse_file)
        browse_button.pack(pady=10)

        self.file_label = tk.Label(root, text="Selected File: None")
        self.file_label.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Excel files", "*.xlsx;*.xls")],
            title="Select an Excel file"
        )
        self.file_label.config(text="Selected File: " + file_path)
        self.show_options(file_path)

    def show_options(self, file_path):
        clear_screen(self.root)

        # Display the selected file path dynamically
        selected_file_label = tk.Label(self.root, text="Selected File: " + file_path)
        selected_file_label.pack(pady=10)

        # Get sheet names from the Excel file
        try:
            excel_file = pd.ExcelFile(file_path)
            sheet_names = excel_file.sheet_names
        except Exception as e:
            tk.messagebox.showerror("Error", f"An error occurred while reading sheet names: {e}")
            return

        # Ask the user to choose a sheet using a custom dialog
        if sheet_names:
            dialog = SheetDialog(self.root, sheet_names=sheet_names)
            self.root.wait_window(dialog)
            selected_sheet = dialog.selected_sheet

            # Continue only if the user selected a sheet
            if selected_sheet:
                # Create new button
                show_activity_button = ttk.Button(self.root, text="Check Rightmove Sold",
                                                  command=lambda: check_rightmove_sold(file_path, selected_sheet))
                show_activity_button.pack(pady=10)
        else:
            tk.messagebox.showinfo("Info", "No sheets found in the Excel file")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
